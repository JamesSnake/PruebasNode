/**
 * Created by Govind Shah
 */

(function (root, factory) {
  'use strict';
  module.exports = factory(require('jsonpath-plus'));
}(this, function(JSONPath) {
  'use strict';
  var _ = require('underscore');

  function traverse(data, path, result, key, operate) {
    var func;

    switch (type(path)) {
      case 'string':
        func = searchSingle;
        break;

      case 'array':
        func = searchArray;
        break;

      case 'object':
        func = searchObject;
        break;
    }

    if (func) {
      func(data, path, result, key, operate);
    }
  }


  function type(obj) {
    return Array.isArray(obj) ? 'array' : typeof obj;
  }


  function searchSingle(data, pathStr, result, key, operate) {
    if(pathStr != '') {
      var search = JSONPath(pathStr, data) || [];
    } else {
      var search = [];
    }
    result[key] = search.length ? search[0] : (pathStr.length ? (pathStr.indexOf('$') === -1 ? pathStr : undefined) : undefined);

    _.each(operate, function(method) {
      var func;
      if (key == method.on) {

        if ('string' === typeof method.run) {
          func = eval(method.run);
        } else {
          func = method.run;
        }

        result[key] = func(result[key]);

      }
    });


  }


  function searchArray(data, pathArr, result, key, operate) {
    var subpath = pathArr[1];
    var path = pathArr[0];

    if(path != '' && path != null) {

      var search = JSONPath(path, data) || [];

    } else {

      var search = [];

    }
    if (search.length && subpath) {
      result = result[key] = [];

      search[0].forEach(function(item, index) {
        traverse(item, subpath, result, index, operate);
      });
    } else {
      result[key] = search;
    }
  }


  function searchObject(data, pathObj, result, key, operate) {

    if (typeof key !== 'undefined') {
      result = result[key] = {};
    }

    Object.keys(pathObj).forEach(function(name) {
      traverse(data, pathObj[name], result, name, operate);
    });
  }


  return {
    transform: function(data, path, operate) {
      this.operate = operate;
      var result = {};

      traverse(data, path, result, '', operate);

      return result;
    }
  };
}));
